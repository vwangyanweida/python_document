"venv" --- 创建虚拟环境
***********************

3.3 新版功能.

**源码：** Lib/venv/

======================================================================

"venv" 模块支持使用自己的站点目录创建轻量级“虚拟环境”，可选择与系统站
点目录隔离。每个虚拟环境都有自己的 Python 二进制文件（与用于创建此环境
的二进制文件的版本相匹配），并且可以在其站点目录中拥有自己独立的已安装
Python 软件包集。

有关 Python 虚拟环境的更多信息，请参阅 **PEP 405** 。

参见: Python 打包用户指南：创建和使用虚拟环境


创建虚拟环境
============

通过执行 "venv" 指令来创建一个 虚拟环境:

   python3 -m venv /path/to/new/virtual/environment

Running this command creates the target directory (creating any parent
directories that don't exist already) and places a "pyvenv.cfg" file
in it with a "home" key pointing to the Python installation from which
the command was run (a common name for the target directory is
".venv").  It also creates a "bin" (or "Scripts" on Windows)
subdirectory containing a copy/symlink of the Python binary/binaries
(as appropriate for the platform or arguments used at environment
creation time). It also creates an (initially empty) "lib/pythonX.Y
/site-packages" subdirectory (on Windows, this is "Lib\site-
packages"). If an existing directory is specified, it will be re-used.

3.6 版后已移除: "pyvenv" 是 Python 3.3 和 3.4 中创建虚拟环境的推荐工具
，不过 在 Python 3.6 中已弃用。

在 3.5 版更改: 现在推荐使用 "venv" 来创建虚拟环境。

On Windows, invoke the "venv" command as follows:

   c:\>c:\Python35\python -m venv c:\path\to\myenv

Alternatively, if you configured the "PATH" and "PATHEXT" variables
for your Python installation:

   c:\>python -m venv c:\path\to\myenv

The command, if run with "-h", will show the available options:

   usage: venv [-h] [--system-site-packages] [--symlinks | --copies] [--clear]
               [--upgrade] [--without-pip] [--prompt PROMPT]
               ENV_DIR [ENV_DIR ...]

   Creates virtual Python environments in one or more target directories.

   positional arguments:
     ENV_DIR               A directory to create the environment in.

   optional arguments:
     -h, --help            show this help message and exit
     --system-site-packages
                           Give the virtual environment access to the system
                           site-packages dir.
     --symlinks            Try to use symlinks rather than copies, when symlinks
                           are not the default for the platform.
     --copies              Try to use copies rather than symlinks, even when
                           symlinks are the default for the platform.
     --clear               Delete the contents of the environment directory if it
                           already exists, before environment creation.
     --upgrade             Upgrade the environment directory to use this version
                           of Python, assuming Python has been upgraded in-place.
     --without-pip         Skips installing or upgrading pip in the virtual
                           environment (pip is bootstrapped by default)
     --prompt PROMPT       Provides an alternative prompt prefix for this
                           environment.

   Once an environment has been created, you may wish to activate it, e.g. by
   sourcing an activate script in its bin directory.

在 3.4 版更改: Installs pip by default, added the "--without-pip"  and
"--copies" options

在 3.4 版更改: In earlier versions, if the target directory already
existed, an error was raised, unless the "--clear" or "--upgrade"
option was provided.

注解: While symlinks are supported on Windows, they are not
  recommended. Of particular note is that double-clicking "python.exe"
  in File Explorer will resolve the symlink eagerly and ignore the
  virtual environment.

The created "pyvenv.cfg" file also includes the "include-system-site-
packages" key, set to "true" if "venv" is run with the "--system-site-
packages" option, "false" otherwise.

Unless the "--without-pip" option is given, "ensurepip" will be
invoked to bootstrap "pip" into the virtual environment.

Multiple paths can be given to "venv", in which case an identical
virtual environment will be created, according to the given options,
at each provided path.

Once a virtual environment has been created, it can be "activated"
using a script in the virtual environment's binary directory. The
invocation of the script is platform-specific (*<venv>* must be
replaced by the path of the directory containing the virtual
environment):

+---------------+-------------------+-------------------------------------------+
| 平台          | Shell             | 用于激活虚拟环境的命令                    |
|===============|===================|===========================================|
| POSIX         | bash/zsh          | $ source <venv>/bin/activate              |
+---------------+-------------------+-------------------------------------------+
|               | fish              | $ . <venv>/bin/activate.fish              |
+---------------+-------------------+-------------------------------------------+
|               | csh/tcsh          | $ source <venv>/bin/activate.csh          |
+---------------+-------------------+-------------------------------------------+
|               | PowerShell Core   | $ <venv>/bin/Activate.ps1                 |
+---------------+-------------------+-------------------------------------------+
| Windows       | cmd.exe           | C:\> <venv>\Scripts\activate.bat          |
+---------------+-------------------+-------------------------------------------+
|               | PowerShell        | PS C:\> <venv>\Scripts\Activate.ps1       |
+---------------+-------------------+-------------------------------------------+

You don't specifically *need* to activate an environment; activation
just prepends the virtual environment's binary directory to your path,
so that "python" invokes the virtual environment's Python interpreter
and you can run installed scripts without having to use their full
path. However, all scripts installed in a virtual environment should
be runnable without activating it, and run with the virtual
environment's Python automatically.

You can deactivate a virtual environment by typing "deactivate" in
your shell. The exact mechanism is platform-specific and is an
internal implementation detail (typically a script or shell function
will be used).

3.4 新版功能: "fish" and "csh" activation scripts.

3.8 新版功能: PowerShell activation scripts installed under POSIX for
PowerShell Core support.

注解: A virtual environment is a Python environment such that the
  Python interpreter, libraries and scripts installed into it are
  isolated from those installed in other virtual environments, and (by
  default) any libraries installed in a "system" Python, i.e., one
  which is installed as part of your operating system.A virtual
  environment is a directory tree which contains Python executable
  files and other files which indicate that it is a virtual
  environment.Common installation tools such as setuptools and pip
  work as expected with virtual environments. In other words, when a
  virtual environment is active, they install Python packages into the
  virtual environment without needing to be told to do so
  explicitly.When a virtual environment is active (i.e., the virtual
  environment's Python interpreter is running), the attributes
  "sys.prefix" and "sys.exec_prefix" point to the base directory of
  the virtual environment, whereas "sys.base_prefix" and
  "sys.base_exec_prefix" point to the non-virtual environment Python
  installation which was used to create the virtual environment. If a
  virtual environment is not active, then "sys.prefix" is the same as
  "sys.base_prefix" and "sys.exec_prefix" is the same as
  "sys.base_exec_prefix" (they all point to a non-virtual environment
  Python installation).When a virtual environment is active, any
  options that change the installation path will be ignored from all
  "distutils" configuration files to prevent projects being
  inadvertently installed outside of the virtual environment.When
  working in a command shell, users can make a virtual environment
  active by running an "activate" script in the virtual environment's
  executables directory (the precise filename and command to use the
  file is shell-dependent), which prepends the virtual environment's
  directory for executables to the "PATH" environment variable for the
  running shell. There should be no need in other circumstances to
  activate a virtual environment; scripts installed into virtual
  environments have a "shebang" line which points to the virtual
  environment's Python interpreter. This means that the script will
  run with that interpreter regardless of the value of "PATH". On
  Windows, "shebang" line processing is supported if you have the
  Python Launcher for Windows installed (this was added to Python in
  3.3 - see **PEP 397** for more details). Thus, double-clicking an
  installed script in a Windows Explorer window should run the script
  with the correct interpreter without there needing to be any
  reference to its virtual environment in "PATH".


API
===

The high-level method described above makes use of a simple API which
provides mechanisms for third-party virtual environment creators to
customize environment creation according to their needs, the
"EnvBuilder" class.

class venv.EnvBuilder(system_site_packages=False, clear=False, symlinks=False, upgrade=False, with_pip=False, prompt=None)

   The "EnvBuilder" class accepts the following keyword arguments on
   instantiation:

   * "system_site_packages" -- a Boolean value indicating that the
     system Python site-packages should be available to the
     environment (defaults to "False").

   * "clear" -- a Boolean value which, if true, will delete the
     contents of any existing target directory, before creating the
     environment.

   * "symlinks" -- a Boolean value indicating whether to attempt to
     symlink the Python binary rather than copying.

   * "upgrade" -- a Boolean value which, if true, will upgrade an
     existing environment with the running Python - for use when that
     Python has been upgraded in-place (defaults to "False").

   * "with_pip" -- a Boolean value which, if true, ensures pip is
     installed in the virtual environment. This uses "ensurepip" with
     the "--default-pip" option.

   * "prompt" -- a String to be used after virtual environment is
     activated (defaults to "None" which means directory name of the
     environment would be used).

   在 3.4 版更改: Added the "with_pip" parameter

   3.6 新版功能: Added the "prompt" parameter

   Creators of third-party virtual environment tools will be free to
   use the provided "EnvBuilder" class as a base class.

   The returned env-builder is an object which has a method, "create":

   create(env_dir)

      Create a virtual environment by specifying the target directory
      (absolute or relative to the current directory) which is to
      contain the virtual environment.  The "create" method will
      either create the environment in the specified directory, or
      raise an appropriate exception.

      The "create" method of the "EnvBuilder" class illustrates the
      hooks available for subclass customization:

         def create(self, env_dir):
             """
             Create a virtualized Python environment in a directory.
             env_dir is the target directory to create an environment in.
             """
             env_dir = os.path.abspath(env_dir)
             context = self.ensure_directories(env_dir)
             self.create_configuration(context)
             self.setup_python(context)
             self.setup_scripts(context)
             self.post_setup(context)

      Each of the methods "ensure_directories()",
      "create_configuration()", "setup_python()", "setup_scripts()"
      and "post_setup()" can be overridden.

   ensure_directories(env_dir)

      Creates the environment directory and all necessary directories,
      and returns a context object.  This is just a holder for
      attributes (such as paths), for use by the other methods. The
      directories are allowed to exist already, as long as either
      "clear" or "upgrade" were specified to allow operating on an
      existing environment directory.

   create_configuration(context)

      Creates the "pyvenv.cfg" configuration file in the environment.

   setup_python(context)

      Creates a copy or symlink to the Python executable in the
      environment. On POSIX systems, if a specific executable
      "python3.x" was used, symlinks to "python" and "python3" will be
      created pointing to that executable, unless files with those
      names already exist.

   setup_scripts(context)

      Installs activation scripts appropriate to the platform into the
      virtual environment.

   upgrade_dependencies(context)

      Upgrades the core venv dependency packages (currently "pip" and
      "setuptools") in the environment. This is done by shelling out
      to the "pip" executable in the environment.

      3.8 新版功能.

   post_setup(context)

      A placeholder method which can be overridden in third party
      implementations to pre-install packages in the virtual
      environment or perform other post-creation steps.

   在 3.7.2 版更改: Windows now uses redirector scripts for
   "python[w].exe" instead of copying the actual binaries. In 3.7.2
   only "setup_python()" does nothing unless running from a build in
   the source tree.

   在 3.7.3 版更改: Windows copies the redirector scripts as part of
   "setup_python()" instead of "setup_scripts()". This was not the
   case in 3.7.2. When using symlinks, the original executables will
   be linked.

   In addition, "EnvBuilder" provides this utility method that can be
   called from "setup_scripts()" or "post_setup()" in subclasses to
   assist in installing custom scripts into the virtual environment.

   install_scripts(context, path)

      *path* is the path to a directory that should contain
      subdirectories "common", "posix", "nt", each containing scripts
      destined for the bin directory in the environment.  The contents
      of "common" and the directory corresponding to "os.name" are
      copied after some text replacement of placeholders:

      * "__VENV_DIR__" is replaced with the absolute path of the
        environment directory.

      * "__VENV_NAME__" is replaced with the environment name (final
        path segment of environment directory).

      * "__VENV_PROMPT__" is replaced with the prompt (the
        environment name surrounded by parentheses and with a
        following space)

      * "__VENV_BIN_NAME__" is replaced with the name of the bin
        directory (either "bin" or "Scripts").

      * "__VENV_PYTHON__" is replaced with the absolute path of the
        environment's executable.

      The directories are allowed to exist (for when an existing
      environment is being upgraded).

有一个方便实用的模块级别的函数:

venv.create(env_dir, system_site_packages=False, clear=False, symlinks=False, with_pip=False, prompt=None)

   通过关键词参数来创建一个 "EnvBuilder"，并且使用 *env_dir* 参数来调
   用它的 "create()" 方法。

   3.3 新版功能.

   在 3.4 版更改: Added the "with_pip" parameter

   在 3.6 版更改: Added the "prompt" parameter


一个扩展 "EnvBuilder" 的例子
============================

下面的脚本展示了如何通过实现一个子类来扩展 "EnvBuilder"。这个子类会安
装 setuptotols 和 pip 的到被创建的虚拟环境中。

   import os
   import os.path
   from subprocess import Popen, PIPE
   import sys
   from threading import Thread
   from urllib.parse import urlparse
   from urllib.request import urlretrieve
   import venv

   class ExtendedEnvBuilder(venv.EnvBuilder):
       """
       This builder installs setuptools and pip so that you can pip or
       easy_install other packages into the created virtual environment.

       :param nodist: If true, setuptools and pip are not installed into the
                      created virtual environment.
       :param nopip: If true, pip is not installed into the created
                     virtual environment.
       :param progress: If setuptools or pip are installed, the progress of the
                        installation can be monitored by passing a progress
                        callable. If specified, it is called with two
                        arguments: a string indicating some progress, and a
                        context indicating where the string is coming from.
                        The context argument can have one of three values:
                        'main', indicating that it is called from virtualize()
                        itself, and 'stdout' and 'stderr', which are obtained
                        by reading lines from the output streams of a subprocess
                        which is used to install the app.

                        If a callable is not specified, default progress
                        information is output to sys.stderr.
       """

       def __init__(self, *args, **kwargs):
           self.nodist = kwargs.pop('nodist', False)
           self.nopip = kwargs.pop('nopip', False)
           self.progress = kwargs.pop('progress', None)
           self.verbose = kwargs.pop('verbose', False)
           super().__init__(*args, **kwargs)

       def post_setup(self, context):
           """
           Set up any packages which need to be pre-installed into the
           virtual environment being created.

           :param context: The information for the virtual environment
                           creation request being processed.
           """
           os.environ['VIRTUAL_ENV'] = context.env_dir
           if not self.nodist:
               self.install_setuptools(context)
           # Can't install pip without setuptools
           if not self.nopip and not self.nodist:
               self.install_pip(context)

       def reader(self, stream, context):
           """
           Read lines from a subprocess' output stream and either pass to a progress
           callable (if specified) or write progress information to sys.stderr.
           """
           progress = self.progress
           while True:
               s = stream.readline()
               if not s:
                   break
               if progress is not None:
                   progress(s, context)
               else:
                   if not self.verbose:
                       sys.stderr.write('.')
                   else:
                       sys.stderr.write(s.decode('utf-8'))
                   sys.stderr.flush()
           stream.close()

       def install_script(self, context, name, url):
           _, _, path, _, _, _ = urlparse(url)
           fn = os.path.split(path)[-1]
           binpath = context.bin_path
           distpath = os.path.join(binpath, fn)
           # Download script into the virtual environment's binaries folder
           urlretrieve(url, distpath)
           progress = self.progress
           if self.verbose:
               term = '\n'
           else:
               term = ''
           if progress is not None:
               progress('Installing %s ...%s' % (name, term), 'main')
           else:
               sys.stderr.write('Installing %s ...%s' % (name, term))
               sys.stderr.flush()
           # Install in the virtual environment
           args = [context.env_exe, fn]
           p = Popen(args, stdout=PIPE, stderr=PIPE, cwd=binpath)
           t1 = Thread(target=self.reader, args=(p.stdout, 'stdout'))
           t1.start()
           t2 = Thread(target=self.reader, args=(p.stderr, 'stderr'))
           t2.start()
           p.wait()
           t1.join()
           t2.join()
           if progress is not None:
               progress('done.', 'main')
           else:
               sys.stderr.write('done.\n')
           # Clean up - no longer needed
           os.unlink(distpath)

       def install_setuptools(self, context):
           """
           Install setuptools in the virtual environment.

           :param context: The information for the virtual environment
                           creation request being processed.
           """
           url = 'https://bitbucket.org/pypa/setuptools/downloads/ez_setup.py'
           self.install_script(context, 'setuptools', url)
           # clear up the setuptools archive which gets downloaded
           pred = lambda o: o.startswith('setuptools-') and o.endswith('.tar.gz')
           files = filter(pred, os.listdir(context.bin_path))
           for f in files:
               f = os.path.join(context.bin_path, f)
               os.unlink(f)

       def install_pip(self, context):
           """
           Install pip in the virtual environment.

           :param context: The information for the virtual environment
                           creation request being processed.
           """
           url = 'https://raw.github.com/pypa/pip/master/contrib/get-pip.py'
           self.install_script(context, 'pip', url)

   def main(args=None):
       compatible = True
       if sys.version_info < (3, 3):
           compatible = False
       elif not hasattr(sys, 'base_prefix'):
           compatible = False
       if not compatible:
           raise ValueError('This script is only for use with '
                            'Python 3.3 or later')
       else:
           import argparse

           parser = argparse.ArgumentParser(prog=__name__,
                                            description='Creates virtual Python '
                                                        'environments in one or '
                                                        'more target '
                                                        'directories.')
           parser.add_argument('dirs', metavar='ENV_DIR', nargs='+',
                               help='A directory in which to create the
                                    'virtual environment.')
           parser.add_argument('--no-setuptools', default=False,
                               action='store_true', dest='nodist',
                               help="Don't install setuptools or pip in the "
                                    "virtual environment.")
           parser.add_argument('--no-pip', default=False,
                               action='store_true', dest='nopip',
                               help="Don't install pip in the virtual "
                                    "environment.")
           parser.add_argument('--system-site-packages', default=False,
                               action='store_true', dest='system_site',
                               help='Give the virtual environment access to the '
                                    'system site-packages dir.')
           if os.name == 'nt':
               use_symlinks = False
           else:
               use_symlinks = True
           parser.add_argument('--symlinks', default=use_symlinks,
                               action='store_true', dest='symlinks',
                               help='Try to use symlinks rather than copies, '
                                    'when symlinks are not the default for '
                                    'the platform.')
           parser.add_argument('--clear', default=False, action='store_true',
                               dest='clear', help='Delete the contents of the '
                                                  'virtual environment '
                                                  'directory if it already '
                                                  'exists, before virtual '
                                                  'environment creation.')
           parser.add_argument('--upgrade', default=False, action='store_true',
                               dest='upgrade', help='Upgrade the virtual '
                                                    'environment directory to '
                                                    'use this version of '
                                                    'Python, assuming Python '
                                                    'has been upgraded '
                                                    'in-place.')
           parser.add_argument('--verbose', default=False, action='store_true',
                               dest='verbose', help='Display the output '
                                                  'from the scripts which '
                                                  'install setuptools and pip.')
           options = parser.parse_args(args)
           if options.upgrade and options.clear:
               raise ValueError('you cannot supply --upgrade and --clear together.')
           builder = ExtendedEnvBuilder(system_site_packages=options.system_site,
                                          clear=options.clear,
                                          symlinks=options.symlinks,
                                          upgrade=options.upgrade,
                                          nodist=options.nodist,
                                          nopip=options.nopip,
                                          verbose=options.verbose)
           for d in options.dirs:
               builder.create(d)

   if __name__ == '__main__':
       rc = 1
       try:
           main()
           rc = 0
       except Exception as e:
           print('Error: %s' % e, file=sys.stderr)
       sys.exit(rc)

这个脚本同样可以 在线下载。

"os.path" --- 常见路径名操作
****************************

**源代码：** Lib/posixpath.py （用于 POSIX）和 Lib/ntpath.py （用于
Windows NT）

======================================================================

该模块在路径名上实现了一些有用的功能：如需读取或写入文件，请参见
"open()" ；有关访问文件系统的信息，请参见 "os" 模块。路径参数可以字符
串或字节形式传递。我们鼓励应用程序将文件名表示为（Unicode）字符串。不
幸的是，某些文件名在Unix上可能无法用字符串表示，因此在Unix上平台上需要
支持任意文件名的应用程序，应使用字节对象来表示路径名。反之亦然，在
Windows平台上仅使用字节对象，不能表示的所有文件名（以标准 "mbcs" 编码
），因此Windows应用程序应使用字符串对象来访问所有文件。

与unix shell不同，Python不执行任何 *自动* 路径扩展。当应用程序需要类似
shell的路径扩展时，可以显式调用诸如 "expanduser()" 和 "expandvars()"
之类的函数。 （另请参见 "glob" 模块。）

参见: "pathlib" 模块提供高级路径对象。

注解: 所有这些函数都仅接受字节或字符串对象作为其参数。如果返回路径或
  文件名 ，则结果是相同类型的对象。

注解: 由于不同的操作系统具有不同的路径名称约定，因此标准库中有此模块
  的几个 版本。 "os.path" 模块始终是适合Python运行的操作系统的路径模块
  ，因此 可用于本地路径。但是，如果操作的路径 *总是* 以一种不同的格式
  显示，那 么也可以分别导入和使用各个模块。它们都具有相同的界面：

  * "posixpath" 用于Unix 样式的路径

  * "ntpath" 用于 Windows 路径

在 3.8 版更改: "exists()", "lexists()", "isdir()", "isfile()",
"islink()", 和 "ismount()" 现在返回 "False" ，而不是对包含在操作系统级
别不可表示的字符或字节的路径引发异常。

os.path.abspath(path)

   Return a normalized absolutized version of the pathname *path*. On
   most platforms, this is equivalent to calling the function
   "normpath()" as follows: "normpath(join(os.getcwd(), path))".

   在 3.6 版更改: 接受一个 *类路径对象*。

os.path.basename(path)

   Return the base name of pathname *path*.  This is the second
   element of the pair returned by passing *path* to the function
   "split()".  Note that the result of this function is different from
   the Unix **basename** program; where **basename** for "'/foo/bar/'"
   returns "'bar'", the "basename()" function returns an empty string
   ("''").

   在 3.6 版更改: 接受一个 *类路径对象*。

os.path.commonpath(paths)

   Return the longest common sub-path of each pathname in the sequence
   *paths*.  Raise "ValueError" if *paths* contain both absolute and
   relative pathnames, the *paths* are on the different drives or if
   *paths* is empty.  Unlike "commonprefix()", this returns a valid
   path.

   可用性: Unix, Windows。

   3.5 新版功能.

   在 3.6 版更改: 接受一个 *类路径对象* 序列。

os.path.commonprefix(list)

   Return the longest path prefix (taken character-by-character) that
   is a prefix of all paths in  *list*.  If *list* is empty, return
   the empty string ("''").

   注解: This function may return invalid paths because it works a
     character at a time.  To obtain a valid path, see "commonpath()".

        >>> os.path.commonprefix(['/usr/lib', '/usr/local/lib'])
        '/usr/l'

        >>> os.path.commonpath(['/usr/lib', '/usr/local/lib'])
        '/usr'

   在 3.6 版更改: 接受一个 *类路径对象*。

os.path.dirname(path)

   Return the directory name of pathname *path*.  This is the first
   element of the pair returned by passing *path* to the function
   "split()".

   在 3.6 版更改: 接受一个 *类路径对象*。

os.path.exists(path)

   Return "True" if *path* refers to an existing path or an open file
   descriptor.  Returns "False" for broken symbolic links.  On some
   platforms, this function may return "False" if permission is not
   granted to execute "os.stat()" on the requested file, even if the
   *path* physically exists.

   在 3.3 版更改: *path* can now be an integer: "True" is returned if
   it is an  open file descriptor, "False" otherwise.

   在 3.6 版更改: 接受一个 *类路径对象*。

os.path.lexists(path)

   Return "True" if *path* refers to an existing path. Returns "True"
   for broken symbolic links.   Equivalent to "exists()" on platforms
   lacking "os.lstat()".

   在 3.6 版更改: 接受一个 *类路径对象*。

os.path.expanduser(path)

   On Unix and Windows, return the argument with an initial component
   of "~" or "~user" replaced by that *user*'s home directory.

   On Unix, an initial "~" is replaced by the environment variable
   "HOME" if it is set; otherwise the current user's home directory is
   looked up in the password directory through the built-in module
   "pwd". An initial "~user" is looked up directly in the password
   directory.

   On Windows, "USERPROFILE" will be used if set, otherwise a
   combination of "HOMEPATH" and "HOMEDRIVE" will be used.  An initial
   "~user" is handled by stripping the last directory component from
   the created user path derived above.

   If the expansion fails or if the path does not begin with a tilde,
   the path is returned unchanged.

   在 3.6 版更改: 接受一个 *类路径对象*。

   在 3.8 版更改: Windows 不再使用 "HOME"

os.path.expandvars(path)

   Return the argument with environment variables expanded.
   Substrings of the form "$name" or "${name}" are replaced by the
   value of environment variable *name*.  Malformed variable names and
   references to non-existing variables are left unchanged.

   On Windows, "%name%" expansions are supported in addition to
   "$name" and "${name}".

   在 3.6 版更改: 接受一个 *类路径对象*。

os.path.getatime(path)

   Return the time of last access of *path*.  The return value is a
   floating point number giving the number of seconds since the epoch
   (see the  "time" module).  Raise "OSError" if the file does not
   exist or is inaccessible.

os.path.getmtime(path)

   Return the time of last modification of *path*.  The return value
   is a floating point number giving the number of seconds since the
   epoch (see the  "time" module). Raise "OSError" if the file does
   not exist or is inaccessible.

   在 3.6 版更改: 接受一个 *类路径对象*。

os.path.getctime(path)

   Return the system's ctime which, on some systems (like Unix) is the
   time of the last metadata change, and, on others (like Windows), is
   the creation time for *path*. The return value is a number giving
   the number of seconds since the epoch (see the  "time" module).
   Raise "OSError" if the file does not exist or is inaccessible.

   在 3.6 版更改: 接受一个 *类路径对象*。

os.path.getsize(path)

   Return the size, in bytes, of *path*.  Raise "OSError" if the file
   does not exist or is inaccessible.

   在 3.6 版更改: 接受一个 *类路径对象*。

os.path.isabs(path)

   Return "True" if *path* is an absolute pathname.  On Unix, that
   means it begins with a slash, on Windows that it begins with a
   (back)slash after chopping off a potential drive letter.

   在 3.6 版更改: 接受一个 *类路径对象*。

os.path.isfile(path)

   Return "True" if *path* is an "existing" regular file. This follows
   symbolic links, so both "islink()" and "isfile()" can be true for
   the same path.

   在 3.6 版更改: 接受一个 *类路径对象*。

os.path.isdir(path)

   Return "True" if *path* is an "existing" directory.  This follows
   symbolic links, so both "islink()" and "isdir()" can be true for
   the same path.

   在 3.6 版更改: 接受一个 *类路径对象*。

os.path.islink(path)

   Return "True" if *path* refers to an "existing" directory entry
   that is a symbolic link.  Always "False" if symbolic links are not
   supported by the Python runtime.

   在 3.6 版更改: 接受一个 *类路径对象*。

os.path.ismount(path)

   Return "True" if pathname *path* is a *mount point*: a point in a
   file system where a different file system has been mounted.  On
   POSIX, the function checks whether *path*'s parent, "*path*/..", is
   on a different device than *path*, or whether "*path*/.." and
   *path* point to the same i-node on the same device --- this should
   detect mount points for all Unix and POSIX variants.  It is not
   able to reliably detect bind mounts on the same filesystem.  On
   Windows, a drive letter root and a share UNC are always mount
   points, and for any other path "GetVolumePathName" is called to see
   if it is different from the input path.

   3.4 新版功能: 支持在Windows上检测非根安装点。

   在 3.6 版更改: 接受一个 *类路径对象*。

os.path.join(path, *paths)

   Join one or more path components intelligently.  The return value
   is the concatenation of *path* and any members of **paths* with
   exactly one directory separator ("os.sep") following each non-empty
   part except the last, meaning that the result will only end in a
   separator if the last part is empty.  If a component is an absolute
   path, all previous components are thrown away and joining continues
   from the absolute path component.

   On Windows, the drive letter is not reset when an absolute path
   component (e.g., "r'\foo'") is encountered.  If a component
   contains a drive letter, all previous components are thrown away
   and the drive letter is reset.  Note that since there is a current
   directory for each drive, "os.path.join("c:", "foo")" represents a
   path relative to the current directory on drive "C:" ("c:foo"), not
   "c:\foo".

   在 3.6 版更改: 接受一个 *类路径对象* 用于 *path* 和 *paths* 。

os.path.normcase(path)

   Normalize the case of a pathname.  On Windows, convert all
   characters in the pathname to lowercase, and also convert forward
   slashes to backward slashes. On other operating systems, return the
   path unchanged.

   在 3.6 版更改: 接受一个 *类路径对象*。

os.path.normpath(path)

   Normalize a pathname by collapsing redundant separators and up-
   level references so that "A//B", "A/B/", "A/./B" and "A/foo/../B"
   all become "A/B".  This string manipulation may change the meaning
   of a path that contains symbolic links.  On Windows, it converts
   forward slashes to backward slashes. To normalize case, use
   "normcase()".

   在 3.6 版更改: 接受一个 *类路径对象*。

os.path.realpath(path)

   Return the canonical path of the specified filename, eliminating
   any symbolic links encountered in the path (if they are supported
   by the operating system).

   注解: When symbolic link cycles occur, the returned path will be
     one member of the cycle, but no guarantee is made about which
     member that will be.

   在 3.6 版更改: 接受一个 *类路径对象*。

   在 3.8 版更改: Symbolic links and junctions are now resolved on
   Windows.

os.path.relpath(path, start=os.curdir)

   Return a relative filepath to *path* either from the current
   directory or from an optional *start* directory.  This is a path
   computation:  the filesystem is not accessed to confirm the
   existence or nature of *path* or *start*.

   *start* 默认为 "os.curdir"

   可用性: Unix, Windows。

   在 3.6 版更改: 接受一个 *类路径对象*。

os.path.samefile(path1, path2)

   Return "True" if both pathname arguments refer to the same file or
   directory. This is determined by the device number and i-node
   number and raises an exception if an "os.stat()" call on either
   pathname fails.

   可用性: Unix, Windows。

   在 3.2 版更改: 添加了Windows 支持

   在 3.4 版更改: Windows现在使用与其他所有平台相同的实现。

   在 3.6 版更改: 接受一个 *类路径对象*。

os.path.sameopenfile(fp1, fp2)

   Return "True" if the file descriptors *fp1* and *fp2* refer to the
   same file.

   可用性: Unix, Windows。

   在 3.2 版更改: 添加了Windows 支持

   在 3.6 版更改: 接受一个 *类路径对象*。

os.path.samestat(stat1, stat2)

   Return "True" if the stat tuples *stat1* and *stat2* refer to the
   same file. These structures may have been returned by "os.fstat()",
   "os.lstat()", or "os.stat()".  This function implements the
   underlying comparison used by "samefile()" and "sameopenfile()".

   可用性: Unix, Windows。

   在 3.4 版更改: 添加了Windows 支持

   在 3.6 版更改: 接受一个 *类路径对象*。

os.path.split(path)

   Split the pathname *path* into a pair, "(head, tail)" where *tail*
   is the last pathname component and *head* is everything leading up
   to that.  The *tail* part will never contain a slash; if *path*
   ends in a slash, *tail* will be empty.  If there is no slash in
   *path*, *head* will be empty.  If *path* is empty, both *head* and
   *tail* are empty.  Trailing slashes are stripped from *head* unless
   it is the root (one or more slashes only).  In all cases,
   "join(head, tail)" returns a path to the same location as *path*
   (but the strings may differ).  Also see the functions "dirname()"
   and "basename()".

   在 3.6 版更改: 接受一个 *类路径对象*。

os.path.splitdrive(path)

   Split the pathname *path* into a pair "(drive, tail)" where *drive*
   is either a mount point or the empty string.  On systems which do
   not use drive specifications, *drive* will always be the empty
   string.  In all cases, "drive + tail" will be the same as *path*.

   On Windows, splits a pathname into drive/UNC sharepoint and
   relative path.

   If the path contains a drive letter, drive will contain everything
   up to and including the colon. e.g. "splitdrive("c:/dir")" returns
   "("c:", "/dir")"

   If the path contains a UNC path, drive will contain the host name
   and share, up to but not including the fourth separator. e.g.
   "splitdrive("//host/computer/dir")" returns "("//host/computer",
   "/dir")"

   在 3.6 版更改: 接受一个 *类路径对象*。

os.path.splitext(path)

   Split the pathname *path* into a pair "(root, ext)"  such that
   "root + ext == path", and *ext* is empty or begins with a period
   and contains at most one period. Leading periods on the basename
   are  ignored; "splitext('.cshrc')" returns  "('.cshrc', '')".

   在 3.6 版更改: 接受一个 *类路径对象*。

os.path.supports_unicode_filenames

   "True" if arbitrary Unicode strings can be used as file names
   (within limitations imposed by the file system).

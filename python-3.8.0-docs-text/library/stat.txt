"stat" --- Interpreting "stat()" results
****************************************

**源代码：** Lib/stat.py

======================================================================

The "stat" module defines constants and functions for interpreting the
results of "os.stat()", "os.fstat()" and "os.lstat()" (if they exist).
For complete details about the "stat()", "fstat()" and "lstat()"
calls, consult the documentation for your system.

在 3.4 版更改: The stat module is backed by a C implementation.

The "stat" module defines the following functions to test for specific
file types:

stat.S_ISDIR(mode)

   Return non-zero if the mode is from a directory.

stat.S_ISCHR(mode)

   Return non-zero if the mode is from a character special device
   file.

stat.S_ISBLK(mode)

   Return non-zero if the mode is from a block special device file.

stat.S_ISREG(mode)

   Return non-zero if the mode is from a regular file.

stat.S_ISFIFO(mode)

   Return non-zero if the mode is from a FIFO (named pipe).

stat.S_ISLNK(mode)

   Return non-zero if the mode is from a symbolic link.

stat.S_ISSOCK(mode)

   Return non-zero if the mode is from a socket.

stat.S_ISDOOR(mode)

   Return non-zero if the mode is from a door.

   3.4 新版功能.

stat.S_ISPORT(mode)

   Return non-zero if the mode is from an event port.

   3.4 新版功能.

stat.S_ISWHT(mode)

   Return non-zero if the mode is from a whiteout.

   3.4 新版功能.

Two additional functions are defined for more general manipulation of
the file's mode:

stat.S_IMODE(mode)

   Return the portion of the file's mode that can be set by
   "os.chmod()"---that is, the file's permission bits, plus the sticky
   bit, set-group-id, and set-user-id bits (on systems that support
   them).

stat.S_IFMT(mode)

   Return the portion of the file's mode that describes the file type
   (used by the "S_IS*()" functions above).

Normally, you would use the "os.path.is*()" functions for testing the
type of a file; the functions here are useful when you are doing
multiple tests of the same file and wish to avoid the overhead of the
"stat()" system call for each test.  These are also useful when
checking for information about a file that isn't handled by "os.path",
like the tests for block and character devices.

示例:

   import os, sys
   from stat import *

   def walktree(top, callback):
       '''recursively descend the directory tree rooted at top,
          calling the callback function for each regular file'''

       for f in os.listdir(top):
           pathname = os.path.join(top, f)
           mode = os.stat(pathname).st_mode
           if S_ISDIR(mode):
               # It's a directory, recurse into it
               walktree(pathname, callback)
           elif S_ISREG(mode):
               # It's a file, call the callback function
               callback(pathname)
           else:
               # Unknown file type, print a message
               print('Skipping %s' % pathname)

   def visitfile(file):
       print('visiting', file)

   if __name__ == '__main__':
       walktree(sys.argv[1], visitfile)

An additional utility function is provided to convert a file's mode in
a human readable string:

stat.filemode(mode)

   Convert a file's mode to a string of the form '-rwxrwxrwx'.

   3.3 新版功能.

   在 3.4 版更改: The function supports "S_IFDOOR", "S_IFPORT" and
   "S_IFWHT".

All the variables below are simply symbolic indexes into the 10-tuple
returned by "os.stat()", "os.fstat()" or "os.lstat()".

stat.ST_MODE

   inode保护模式。

stat.ST_INO

   Inode 号

stat.ST_DEV

   Device inode resides on.

stat.ST_NLINK

   Number of links to the inode.

stat.ST_UID

   所有者的用户ID。

stat.ST_GID

   所有者的用户组ID。

stat.ST_SIZE

   Size in bytes of a plain file; amount of data waiting on some
   special files.

stat.ST_ATIME

   上次访问的时间。

stat.ST_MTIME

   上次修改的时间。

stat.ST_CTIME

   The "ctime" as reported by the operating system.  On some systems
   (like Unix) is the time of the last metadata change, and, on others
   (like Windows), is the creation time (see platform documentation
   for details).

The interpretation of "file size" changes according to the file type.
For plain files this is the size of the file in bytes.  For FIFOs and
sockets under most flavors of Unix (including Linux in particular),
the "size" is the number of bytes waiting to be read at the time of
the call to "os.stat()", "os.fstat()", or "os.lstat()"; this can
sometimes be useful, especially for polling one of these special files
after a non-blocking open.  The meaning of the size field for other
character and block devices varies more, depending on the
implementation of the underlying system call.

The variables below define the flags used in the "ST_MODE" field.

Use of the functions above is more portable than use of the first set
of flags:

stat.S_IFSOCK

   套接字

stat.S_IFLNK

   符号链接。

stat.S_IFREG

   普通文件。

stat.S_IFBLK

   块设备

stat.S_IFDIR

   目录

stat.S_IFCHR

   字符设备。

stat.S_IFIFO

   先进先出

stat.S_IFDOOR

   Door.

   3.4 新版功能.

stat.S_IFPORT

   事件端口。

   3.4 新版功能.

stat.S_IFWHT

   Whiteout.

   3.4 新版功能.

注解: "S_IFDOOR", "S_IFPORT" or "S_IFWHT" are defined as 0 when the
  platform does not have support for the file types.

The following flags can also be used in the *mode* argument of
"os.chmod()":

stat.S_ISUID

   设置UID位。

stat.S_ISGID

   Set-group-ID bit.  This bit has several special uses.  For a
   directory it indicates that BSD semantics is to be used for that
   directory: files created there inherit their group ID from the
   directory, not from the effective group ID of the creating process,
   and directories created there will also get the "S_ISGID" bit set.
   For a file that does not have the group execution bit ("S_IXGRP")
   set, the set-group-ID bit indicates mandatory file/record locking
   (see also "S_ENFMT").

stat.S_ISVTX

   Sticky bit.  When this bit is set on a directory it means that a
   file in that directory can be renamed or deleted only by the owner
   of the file, by the owner of the directory, or by a privileged
   process.

stat.S_IRWXU

   文件所有者权限的掩码。

stat.S_IRUSR

   所有者具有读取权限。

stat.S_IWUSR

   所有者具有写入权限。

stat.S_IXUSR

   所有者具有执行权限。

stat.S_IRWXG

   组权限的掩码。

stat.S_IRGRP

   组具有读取权限。

stat.S_IWGRP

   组具有写入权限。

stat.S_IXGRP

   组具有执行权限。

stat.S_IRWXO

   其他人（不在组中）的权限掩码。

stat.S_IROTH

   其他人具有读取权限。

stat.S_IWOTH

   其他人具有写入权限。

stat.S_IXOTH

   其他人具有执行权限。

stat.S_ENFMT

   System V file locking enforcement.  This flag is shared with
   "S_ISGID": file/record locking is enforced on files that do not
   have the group execution bit ("S_IXGRP") set.

stat.S_IREAD

   Unix V7 synonym for "S_IRUSR".

stat.S_IWRITE

   Unix V7 synonym for "S_IWUSR".

stat.S_IEXEC

   Unix V7 synonym for "S_IXUSR".

The following flags can be used in the *flags* argument of
"os.chflags()":

stat.UF_NODUMP

   不要转储文件。

stat.UF_IMMUTABLE

   文件不能更改。

stat.UF_APPEND

   文件只能附加到。

stat.UF_OPAQUE

   当通过联合堆栈查看时，目录是不透明的。

stat.UF_NOUNLINK

   文件不能重命名或删除。

stat.UF_COMPRESSED

   文件是压缩存储的（Mac OS X 10.6+）。

stat.UF_HIDDEN

   文件不能显示在GUI 中（Mac OS X 10.5+）。

stat.SF_ARCHIVED

   文件可能已存档。

stat.SF_IMMUTABLE

   文件不能更改。

stat.SF_APPEND

   文件只能附加到。

stat.SF_NOUNLINK

   文件不能重命名或删除。

stat.SF_SNAPSHOT

   文件有一个快照文件

See the *BSD or Mac OS systems man page *chflags(2)* for more
information.

On Windows, the following file attribute constants are available for
use when testing bits in the "st_file_attributes" member returned by
"os.stat()". See the Windows API documentation for more detail on the
meaning of these constants.

stat.FILE_ATTRIBUTE_ARCHIVE
stat.FILE_ATTRIBUTE_COMPRESSED
stat.FILE_ATTRIBUTE_DEVICE
stat.FILE_ATTRIBUTE_DIRECTORY
stat.FILE_ATTRIBUTE_ENCRYPTED
stat.FILE_ATTRIBUTE_HIDDEN
stat.FILE_ATTRIBUTE_INTEGRITY_STREAM
stat.FILE_ATTRIBUTE_NORMAL
stat.FILE_ATTRIBUTE_NOT_CONTENT_INDEXED
stat.FILE_ATTRIBUTE_NO_SCRUB_DATA
stat.FILE_ATTRIBUTE_OFFLINE
stat.FILE_ATTRIBUTE_READONLY
stat.FILE_ATTRIBUTE_REPARSE_POINT
stat.FILE_ATTRIBUTE_SPARSE_FILE
stat.FILE_ATTRIBUTE_SYSTEM
stat.FILE_ATTRIBUTE_TEMPORARY
stat.FILE_ATTRIBUTE_VIRTUAL

   3.5 新版功能.

On Windows, the following constants are available for comparing
against the "st_reparse_tag" member returned by "os.lstat()". These
are well-known constants, but are not an exhaustive list.

stat.IO_REPARSE_TAG_SYMLINK
stat.IO_REPARSE_TAG_MOUNT_POINT
stat.IO_REPARSE_TAG_APPEXECLINK

   3.8 新版功能.

"bz2" --- 对 **bzip2** 压缩算法的支持
*************************************

**源代码：** Lib/bz2.py

======================================================================

此模块提供了使用 bzip2 压缩算法压缩和解压数据的一套完整的接口。

"bz2" 模块包含：

* 用于读写压缩文件的 "open()" 函数和 "BZ2File" 类。

* 用于增量压缩和解压的 "BZ2Compressor" 和 "BZ2Decompressor" 类。

* 用于一次性压缩和解压的 "compress()" 和 "decompress()" 函数。

此模块中的所有类都能安全地从多个线程访问。


文件压缩和解压
==============

bz2.open(filename, mode='r', compresslevel=9, encoding=None, errors=None, newline=None)

   以二进制或文本模式打开 bzip2 压缩文件，返回一个 *file object*。

   和 "BZ2File" 的构造函数类似，*filename* 参数可以是一个实际的文件名
   （"str" 或 "bytes" 对象），或是已有的可供读取或写入的文件对象。

   *mode* 参数可设为二进制模式的 "'r'"、"'rb'"、"'w'"、"'wb'"、"'x'"、
   "'xb'"、"'a'" 或 "'ab'"，或者文本模式的 "'rt'"、"'wt'"、"'xt'" 或
   "'at'"。默认是 "'rb'"。

   *compresslevel* 参数是 1 到 9 的整数，和 "BZ2File" 的构造函数一样。

   For binary mode, this function is equivalent to the "BZ2File"
   constructor: "BZ2File(filename, mode,
   compresslevel=compresslevel)". In this case, the *encoding*,
   *errors* and *newline* arguments must not be provided.

   For text mode, a "BZ2File" object is created, and wrapped in an
   "io.TextIOWrapper" instance with the specified encoding, error
   handling behavior, and line ending(s).

   3.3 新版功能.

   在 3.4 版更改: 添加了 "'x'" (仅创建) 模式。

   在 3.6 版更改: 接受一个 *类路径对象*。

class bz2.BZ2File(filename, mode='r', buffering=None, compresslevel=9)

   用二进制模式打开 bzip2 压缩文件。

   If *filename* is a "str" or "bytes" object, open the named file
   directly. Otherwise, *filename* should be a *file object*, which
   will be used to read or write the compressed data.

   The *mode* argument can be either "'r'" for reading (default),
   "'w'" for overwriting, "'x'" for exclusive creation, or "'a'" for
   appending. These can equivalently be given as "'rb'", "'wb'",
   "'xb'" and "'ab'" respectively.

   If *filename* is a file object (rather than an actual file name), a
   mode of "'w'" does not truncate the file, and is instead equivalent
   to "'a'".

   The *buffering* argument is ignored. Its use is deprecated since
   Python 3.0.

   If *mode* is "'w'" or "'a'", *compresslevel* can be an integer
   between "1" and "9" specifying the level of compression: "1"
   produces the least compression, and "9" (default) produces the most
   compression.

   If *mode* is "'r'", the input file may be the concatenation of
   multiple compressed streams.

   "BZ2File" provides all of the members specified by the
   "io.BufferedIOBase", except for "detach()" and "truncate()".
   Iteration and the "with" statement are supported.

   "BZ2File" also provides the following method:

   peek([n])

      Return buffered data without advancing the file position. At
      least one byte of data will be returned (unless at EOF). The
      exact number of bytes returned is unspecified.

      注解: While calling "peek()" does not change the file position
        of the "BZ2File", it may change the position of the underlying
        file object (e.g. if the "BZ2File" was constructed by passing
        a file object for *filename*).

      3.3 新版功能.

   3.0 版后已移除: The keyword argument *buffering* was deprecated and
   is now ignored.

   在 3.1 版更改: 支持了 "with" 语句。

   在 3.3 版更改: The "fileno()", "readable()", "seekable()",
   "writable()", "read1()" and "readinto()" methods were added.

   在 3.3 版更改: Support was added for *filename* being a *file
   object* instead of an actual filename.

   在 3.3 版更改: The "'a'" (append) mode was added, along with
   support for reading multi-stream files.

   在 3.4 版更改: 添加了 "'x'" (仅创建) 模式。

   在 3.5 版更改: The "read()" method now accepts an argument of
   "None".

   在 3.6 版更改: 接受一个 *类路径对象*。


增量压缩和解压
==============

class bz2.BZ2Compressor(compresslevel=9)

   Create a new compressor object. This object may be used to compress
   data incrementally. For one-shot compression, use the "compress()"
   function instead.

   *compresslevel*, if given, must be an integer between "1" and "9".
   The default is "9".

   compress(data)

      Provide data to the compressor object. Returns a chunk of
      compressed data if possible, or an empty byte string otherwise.

      When you have finished providing data to the compressor, call
      the "flush()" method to finish the compression process.

   flush()

      结束压缩进程，返回内部缓冲中剩余的压缩完成的数据。

      The compressor object may not be used after this method has been
      called.

class bz2.BZ2Decompressor

   Create a new decompressor object. This object may be used to
   decompress data incrementally. For one-shot compression, use the
   "decompress()" function instead.

   注解: This class does not transparently handle inputs containing
     multiple compressed streams, unlike "decompress()" and "BZ2File".
     If you need to decompress a multi-stream input with
     "BZ2Decompressor", you must use a new decompressor for each
     stream.

   decompress(data, max_length=-1)

      Decompress *data* (a *bytes-like object*), returning
      uncompressed data as bytes. Some of *data* may be buffered
      internally, for use in later calls to "decompress()". The
      returned data should be concatenated with the output of any
      previous calls to "decompress()".

      If *max_length* is nonnegative, returns at most *max_length*
      bytes of decompressed data. If this limit is reached and further
      output can be produced, the "needs_input" attribute will be set
      to "False". In this case, the next call to "decompress()" may
      provide *data* as "b''" to obtain more of the output.

      If all of the input data was decompressed and returned (either
      because this was less than *max_length* bytes, or because
      *max_length* was negative), the "needs_input" attribute will be
      set to "True".

      Attempting to decompress data after the end of stream is reached
      raises an *EOFError*.  Any data found after the end of the
      stream is ignored and saved in the "unused_data" attribute.

      在 3.5 版更改: Added the *max_length* parameter.

   eof

      若达到了数据流末尾标识符则为 "True"。

      3.3 新版功能.

   unused_data

      压缩数据流的末尾还有数据。

      If this attribute is accessed before the end of the stream has
      been reached, its value will be "b''".

   needs_input

      "False" if the "decompress()" method can provide more
      decompressed data before requiring new uncompressed input.

      3.5 新版功能.


一次性压缩或解压
================

bz2.compress(data, compresslevel=9)

   Compress *data*, a *bytes-like object*.

   *compresslevel*, if given, must be an integer between "1" and "9".
   The default is "9".

   For incremental compression, use a "BZ2Compressor" instead.

bz2.decompress(data)

   Decompress *data*, a *bytes-like object*.

   If *data* is the concatenation of multiple compressed streams,
   decompress all of the streams.

   For incremental decompression, use a "BZ2Decompressor" instead.

   在 3.3 版更改: 支持了多数据流的输入。


用法示例
========

Below are some examples of typical usage of the "bz2" module.

Using "compress()" and "decompress()" to demonstrate round-trip
compression:

>>> import bz2

>>> data = b"""\
... Donec rhoncus quis sapien sit amet molestie. Fusce scelerisque vel augue
... nec ullamcorper. Nam rutrum pretium placerat. Aliquam vel tristique lorem,
... sit amet cursus ante. In interdum laoreet mi, sit amet ultrices purus
... pulvinar a. Nam gravida euismod magna, non varius justo tincidunt feugiat.
... Aliquam pharetra lacus non risus vehicula rutrum. Maecenas aliquam leo
... felis. Pellentesque semper nunc sit amet nibh ullamcorper, ac elementum
... dolor luctus. Curabitur lacinia mi ornare consectetur vestibulum."""

>>> c = bz2.compress(data)
>>> len(data) / len(c)  # Data compression ratio
1.513595166163142

>>> d = bz2.decompress(c)
>>> data == d  # Check equality to original object after round-trip
True

Using "BZ2Compressor" for incremental compression:

>>> import bz2

>>> def gen_data(chunks=10, chunksize=1000):
...     """Yield incremental blocks of chunksize bytes."""
...     for _ in range(chunks):
...         yield b"z" * chunksize
...
>>> comp = bz2.BZ2Compressor()
>>> out = b""
>>> for chunk in gen_data():
...     # Provide data to the compressor object
...     out = out + comp.compress(chunk)
...
>>> # Finish the compression process.  Call this once you have
>>> # finished providing data to the compressor.
>>> out = out + comp.flush()

The example above uses a very "nonrandom" stream of data (a stream of
*b"z"* chunks).  Random data tends to compress poorly, while ordered,
repetitive data usually yields a high compression ratio.

Writing and reading a bzip2-compressed file in binary mode:

>>> import bz2

>>> data = b"""\
... Donec rhoncus quis sapien sit amet molestie. Fusce scelerisque vel augue
... nec ullamcorper. Nam rutrum pretium placerat. Aliquam vel tristique lorem,
... sit amet cursus ante. In interdum laoreet mi, sit amet ultrices purus
... pulvinar a. Nam gravida euismod magna, non varius justo tincidunt feugiat.
... Aliquam pharetra lacus non risus vehicula rutrum. Maecenas aliquam leo
... felis. Pellentesque semper nunc sit amet nibh ullamcorper, ac elementum
... dolor luctus. Curabitur lacinia mi ornare consectetur vestibulum."""

>>> with bz2.open("myfile.bz2", "wb") as f:
...     # Write compressed data to file
...     unused = f.write(data)

>>> with bz2.open("myfile.bz2", "rb") as f:
...     # Decompress data from file
...     content = f.read()

>>> content == data  # Check equality to original object after round-trip
True
